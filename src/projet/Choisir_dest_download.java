/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/

package projet;

import com.dropbox.core.DbxClient;
import com.google.api.services.drive.Drive;
import javax.swing.ImageIcon;
import javax.swing.JButton;

/**
 *
 * @author Munoz and Porret
 */
public class Choisir_dest_download extends javax.swing.JFrame implements Runnable {
    
    /**
     * Creates new form Choisir_dest_download
     */
    private JButton downloadButton,rebuildButton;
    private Fichier fichier;
    private Interface_principale interface_principale;
    private DbxClient jeton;
    private Drive serviceGoogle;
    private String path;
    private String folderId;
    private ProgressBar_resynchro progressBar_resynchro;
    private final String password;
    
    public Choisir_dest_download(JButton downloadButton, JButton rebuildButton, Fichier fichier, Interface_principale interface_principale,DbxClient jeton,Drive serviceGoogle,String password,String folderId) {
        this.rebuildButton=rebuildButton;
        this.downloadButton=downloadButton;
        this.fichier=fichier;
        this.interface_principale=interface_principale;
        this.jeton=jeton;
        this.serviceGoogle=serviceGoogle;
        this.password=password;
        this.folderId=folderId;
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/images/download-cloud3.png")).getImage()); 
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("RAID Web - Choix du dossier de destination");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jFileChooser1.setApproveButtonText("Télécharger");
        jFileChooser1.setCurrentDirectory(new java.io.File("C:\\"));
            jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
            jFileChooser1.setAutoscrolls(true);
            jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jFileChooser1ActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE))
            );

            pack();
            setLocationRelativeTo(null);
        }// </editor-fold>//GEN-END:initComponents
    
    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // Cas où l'utilisateur clique sur le bouton "Télécharger"
        if(evt.getActionCommand() == "ApproveSelection")
        {
            //Création de la barre de progression et Affectation du texte à afficher dans la fenêtre
            progressBar_resynchro=new ProgressBar_resynchro();
            progressBar_resynchro.setjLabeltext("Téléchargement du fichier "+fichier.getName()+" en cours...");
            
            //On récupère le chemin du dossier de destination
            path=jFileChooser1.getSelectedFile().getPath()+"\\";
            //on affecte le chemin pour la reconstruction
            interface_principale.setPathDownload(path);
            //On désactive le bouton de téléchargement
            downloadButton.setEnabled(false);
            //On active le bouton de reconstruction du fichier d'origine
            rebuildButton.setEnabled(true);
            //Appel de la méthode de téléchargement de l'API Dropbox et google
            new Thread(this).start();
            
            
            
            
            
        }
        else if(evt.getActionCommand() == "CancelSelection")
        {
            interface_principale.setEnabled(true);
            interface_principale.setAlwaysOnTop(true);
            interface_principale.setAlwaysOnTop(false);
            //On ferme l'objet graphique JFileChooser
            dispose();
            
            
        }
        
        
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    // Cas où l'utilisateur clique sur le bouton "Fermer" de la fenêtre 
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        //On remet en premier plan la fenêtre principale
        interface_principale.setEnabled(true);
        interface_principale.setAlwaysOnTop(true);
        interface_principale.setAlwaysOnTop(false);
    }//GEN-LAST:event_formWindowClosed
    @Override
    public void run() {
        //Création et lancement du Thread gérant les téléchargements
        
            DownloadThread  downloadThread = new DownloadThread(jeton, serviceGoogle, fichier, interface_principale, path,progressBar_resynchro, downloadButton, rebuildButton,folderId,password);

        downloadThread.start();
        //On ferme la fenêtre de séléction du choix de destination du téléchargement
        dispose();
        try {
            //Attente que les téléchargements se soient bien déroulés 
            downloadThread.join();
            //Affectation des chemins absolus des fichiers récupérés
            fichier.setDownloadDropbox_Path1(path+fichier.getName()+".1");
            fichier.setDownloadDropbox_Path2(path+fichier.getName()+".2");
            fichier.setDownloadGoogle_Path3(path+fichier.getName()+".3");
            fichier.setDownloadGoogle_Path4(path+fichier.getName()+".4");
             progressBar_resynchro.dispose();
            //On réactive la fenêtre principale
            interface_principale.setEnabled(true);
            interface_principale.setAlwaysOnTop(true);
            interface_principale.setAlwaysOnTop(false);
            
            //On ferme la fenêtre de la barre de progression
            String message="Le téléchargement s'est bien déroulé.";
            NewReussiteDialog newReussiteDialog=new NewReussiteDialog(this, true, path, interface_principale, message);
            newReussiteDialog.setjButtonText1("Voir Fichiers");
            newReussiteDialog.setVisible(true);
        //Cas où un des téléchargements se soit mal déroulé  
        } catch (InterruptedException ex) {
            System.out.println("cheet");
            //Affichage d'une fenêtre avertissant l'utilisateur de l'arrêt des téléchargements
            String message="Les téléchargements ne se sont pas bien déroulés. Veuillez réessayer ultérireurement";
            ExceptionDialog exceptionDialog =new ExceptionDialog(interface_principale, true, message);
            exceptionDialog.setVisible(true);
        }
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables
    
    
}
